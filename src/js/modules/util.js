'use strict';let util = {    aUniques(arr) { //数值去重        return Array.from(new Set(arr));    },    cutString(str, num, strSub) { //截取字符串        let asciiNum = str.replace(/[^\x00-\xFF]/g, '').length;        if (asciiNum > num) {            return str.substring(0, str.length - 1) + strSub;        }        return str;    },    template(tmpl, data) { //简单模板替换,tmp要替换的内容为{xxx},data为对象        return tmpl.replace(/\{([^\}]+)\}/g, (k, v) => {            return data[v] === undefined ? '' : data[v];        });    },    randomStr(rlen, len) { //生成随机字符串，rlen< 10都是数字，>10包含字母（偶数是短字符串，奇数是长字符串），len生成长度        return Math.random().toString(rlen).slice(2,len);    },    query(query) { //url查找对应字段数据        let subUrl = location.search.slice(location.search.indexOf('?') + 1),            subArr = subUrl.split('&') || [],            querystr = '';        return subArr.forEach(v => {            v.indexOf(query + '=') === 0 && (querystr = v.slice(query.length + 1))        }), querystr;    },    Queue() { //队列        this.queue = [];    },    Animates() { //动画队列        util.Queue.apply(this, arguments);    },    ImagesLoader() { //图片加载队列        util.Queue.apply(this, arguments);        this.init.apply(this, arguments);    },    obj2str(obj){ // 对象排序并转换为字符串        let keyArr = Object.keys(obj),            str = '',            startStr = '=',            midStr = '',            lastStr = '&';        keyArr.sort();        keyArr.forEach((v, i) => {            midStr = obj[v];            if (typeof obj[v] == 'object') {                midStr = '{' + util.obj2Str(obj[v]) + '}';            }            str += (v + startStr + midStr + (i + 1 == keyArr.length ? '' : lastStr));        });        return str;    }};Object.assign(util.Queue.prototype, {    addqueue() {        if (arguments.length == 0) {            return -1;        }        let i = 0,            len = arguments.length;        for (; i < len; i++) {            this.queue.push(arguments[i]);        }    },    dequeue() {        return this.queue.length == 0 ? null : this.queue.shift();    }});util.Animates.prototype = new util.Queue();Object.assign(util.Animates.prototype, {    add(eventType, targetEle, animateCls, isRemoveCls) {        let o = {            eventType,            targetEle,            animateCls: animateCls == undefined ? '' : animateCls,            isRemoveCls: isRemoveCls == undefined ? false : isRemoveCls        };        this.addqueue(o);    },    play(cb) {        if (this.queue.length < 1) {            return;        }        var cb = cb || (() => {});        let len = this.queue.length,            oEle = this.dequeue(),            parentThis = this;        $(oEle.targetEle).show().addClass(oEle.animateCls).on(oEle.eventType, event => {            event.preventDefault();            $(this).off(oEle.eventType);            oEle.isRemoveCls == true && $(this).removeClass(oEle.animateCls);            parentThis.play(cb);        });        if (parentThisf.queue.length === 0) {            cb();        }    }});util.ImagesLoader.prototype = new util.Queue();Object.assign(util.ImagesLoader.prototype, {    addImagesQueue() {            let that = this,                arr = that.imagesArr;            arr.forEach(val => that.addqueue(val));        },        imagesProgress() {            let that = this,                len = that.maxNum,                pet = that.total;            $('.text em').eq(0).text(Number((100 / len) * pet).toFixed(0));            $('.progress div').css({                '-webkit-transform': 'translate3d(0 ,' + (-100 + ((100 / len) * pet)) + '%, 0)'            });        },        _completes() {            let that = this;            if (this.total === this.maxNum) {                setTimeout(() => {                    $('.loading').hide();                    $('.page').show();                    that.allcompletes();                }, 300);            }        },        allcompletes(cb) {            var cb = cb || (() => {});            cb();        },        loaded() {            let that = this;            $('.loading').show();            if (that.queue.length > 0) {                $('.loading').show();                ++that.total;                that._completes();                that.image.src = that.dequeue();                that.image.onload = that.image.onerror = e => {                    if (this.complete) {                        that.imagesProgress();                        that.loaded();                    }                };            }        },        init(imagesArr) {            this.maxNum = imagesArr.length;            this.image = new Image();            this.total = 0;            this.imagesArr = imagesArr;            this.addImagesQueue();            this.loaded();        }});export default util;